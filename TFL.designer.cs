#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HW5
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TFL_HW2")]
	public partial class TFLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblActivity(tblActivity instance);
    partial void UpdatetblActivity(tblActivity instance);
    partial void DeletetblActivity(tblActivity instance);
    partial void InserttblCard(tblCard instance);
    partial void UpdatetblCard(tblCard instance);
    partial void DeletetblCard(tblCard instance);
    partial void InserttblCardLength(tblCardLength instance);
    partial void UpdatetblCardLength(tblCardLength instance);
    partial void DeletetblCardLength(tblCardLength instance);
    partial void InserttblGeneralParameter(tblGeneralParameter instance);
    partial void UpdatetblGeneralParameter(tblGeneralParameter instance);
    partial void DeletetblGeneralParameter(tblGeneralParameter instance);
    partial void InserttblLine(tblLine instance);
    partial void UpdatetblLine(tblLine instance);
    partial void DeletetblLine(tblLine instance);
    partial void InserttblLineColor(tblLineColor instance);
    partial void UpdatetblLineColor(tblLineColor instance);
    partial void DeletetblLineColor(tblLineColor instance);
    partial void InserttblOysterCard(tblOysterCard instance);
    partial void UpdatetblOysterCard(tblOysterCard instance);
    partial void DeletetblOysterCard(tblOysterCard instance);
    partial void InserttblOysterCardArea(tblOysterCardArea instance);
    partial void UpdatetblOysterCardArea(tblOysterCardArea instance);
    partial void DeletetblOysterCardArea(tblOysterCardArea instance);
    partial void InserttblPaperCard(tblPaperCard instance);
    partial void UpdatetblPaperCard(tblPaperCard instance);
    partial void DeletetblPaperCard(tblPaperCard instance);
    partial void InserttblPaperCardArea(tblPaperCardArea instance);
    partial void UpdatetblPaperCardArea(tblPaperCardArea instance);
    partial void DeletetblPaperCardArea(tblPaperCardArea instance);
    partial void InserttblSite(tblSite instance);
    partial void UpdatetblSite(tblSite instance);
    partial void DeletetblSite(tblSite instance);
    partial void InserttblSiteFromExit(tblSiteFromExit instance);
    partial void UpdatetblSiteFromExit(tblSiteFromExit instance);
    partial void DeletetblSiteFromExit(tblSiteFromExit instance);
    partial void InserttblSiteType(tblSiteType instance);
    partial void UpdatetblSiteType(tblSiteType instance);
    partial void DeletetblSiteType(tblSiteType instance);
    partial void InserttblStation(tblStation instance);
    partial void UpdatetblStation(tblStation instance);
    partial void DeletetblStation(tblStation instance);
    partial void InserttblStationInLine(tblStationInLine instance);
    partial void UpdatetblStationInLine(tblStationInLine instance);
    partial void DeletetblStationInLine(tblStationInLine instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InserttblUserLog(tblUserLog instance);
    partial void UpdatetblUserLog(tblUserLog instance);
    partial void DeletetblUserLog(tblUserLog instance);
    partial void InserttblZone(tblZone instance);
    partial void UpdatetblZone(tblZone instance);
    partial void DeletetblZone(tblZone instance);
    partial void InserttblSiteFromSite(tblSiteFromSite instance);
    partial void UpdatetblSiteFromSite(tblSiteFromSite instance);
    partial void DeletetblSiteFromSite(tblSiteFromSite instance);
    #endregion
		
		public TFLDataContext() : 
				base(global::HW5.Properties.Settings.Default.TFL_HW2ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TFLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TFLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TFLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TFLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblActivity> tblActivities
		{
			get
			{
				return this.GetTable<tblActivity>();
			}
		}
		
		public System.Data.Linq.Table<tblCard> tblCards
		{
			get
			{
				return this.GetTable<tblCard>();
			}
		}
		
		public System.Data.Linq.Table<tblCardLength> tblCardLengths
		{
			get
			{
				return this.GetTable<tblCardLength>();
			}
		}
		
		public System.Data.Linq.Table<tblGeneralParameter> tblGeneralParameters
		{
			get
			{
				return this.GetTable<tblGeneralParameter>();
			}
		}
		
		public System.Data.Linq.Table<tblLine> tblLines
		{
			get
			{
				return this.GetTable<tblLine>();
			}
		}
		
		public System.Data.Linq.Table<tblLineColor> tblLineColors
		{
			get
			{
				return this.GetTable<tblLineColor>();
			}
		}
		
		public System.Data.Linq.Table<tblOysterCard> tblOysterCards
		{
			get
			{
				return this.GetTable<tblOysterCard>();
			}
		}
		
		public System.Data.Linq.Table<tblOysterCardArea> tblOysterCardAreas
		{
			get
			{
				return this.GetTable<tblOysterCardArea>();
			}
		}
		
		public System.Data.Linq.Table<tblPaperCard> tblPaperCards
		{
			get
			{
				return this.GetTable<tblPaperCard>();
			}
		}
		
		public System.Data.Linq.Table<tblPaperCardArea> tblPaperCardAreas
		{
			get
			{
				return this.GetTable<tblPaperCardArea>();
			}
		}
		
		public System.Data.Linq.Table<tblSite> tblSites
		{
			get
			{
				return this.GetTable<tblSite>();
			}
		}
		
		public System.Data.Linq.Table<tblSiteFromExit> tblSiteFromExits
		{
			get
			{
				return this.GetTable<tblSiteFromExit>();
			}
		}
		
		public System.Data.Linq.Table<tblSiteType> tblSiteTypes
		{
			get
			{
				return this.GetTable<tblSiteType>();
			}
		}
		
		public System.Data.Linq.Table<tblStation> tblStations
		{
			get
			{
				return this.GetTable<tblStation>();
			}
		}
		
		public System.Data.Linq.Table<tblStationInLine> tblStationInLines
		{
			get
			{
				return this.GetTable<tblStationInLine>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<tblUserLog> tblUserLogs
		{
			get
			{
				return this.GetTable<tblUserLog>();
			}
		}
		
		public System.Data.Linq.Table<tblZone> tblZones
		{
			get
			{
				return this.GetTable<tblZone>();
			}
		}
		
		public System.Data.Linq.Table<tblSiteFromSite> tblSiteFromSites
		{
			get
			{
				return this.GetTable<tblSiteFromSite>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblActivity")]
	public partial class tblActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _cardNumber;
		
		private System.DateTime _cardPurchaseDate;
		
		private System.DateTime _activityDate;
		
		private char _activityType;
		
		private short _stationID;
		
		private string _lineName;
		
		private EntityRef<tblCard> _tblCard;
		
		private EntityRef<tblLine> _tblLine;
		
		private EntityRef<tblStation> _tblStation;
		
		private EntityRef<tblStationInLine> _tblStationInLine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardNumberChanging(long value);
    partial void OncardNumberChanged();
    partial void OncardPurchaseDateChanging(System.DateTime value);
    partial void OncardPurchaseDateChanged();
    partial void OnactivityDateChanging(System.DateTime value);
    partial void OnactivityDateChanged();
    partial void OnactivityTypeChanging(char value);
    partial void OnactivityTypeChanged();
    partial void OnstationIDChanging(short value);
    partial void OnstationIDChanged();
    partial void OnlineNameChanging(string value);
    partial void OnlineNameChanged();
    #endregion
		
		public tblActivity()
		{
			this._tblCard = default(EntityRef<tblCard>);
			this._tblLine = default(EntityRef<tblLine>);
			this._tblStation = default(EntityRef<tblStation>);
			this._tblStationInLine = default(EntityRef<tblStationInLine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardNumber", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long cardNumber
		{
			get
			{
				return this._cardNumber;
			}
			set
			{
				if ((this._cardNumber != value))
				{
					if (this._tblCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardNumberChanging(value);
					this.SendPropertyChanging();
					this._cardNumber = value;
					this.SendPropertyChanged("cardNumber");
					this.OncardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardPurchaseDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime cardPurchaseDate
		{
			get
			{
				return this._cardPurchaseDate;
			}
			set
			{
				if ((this._cardPurchaseDate != value))
				{
					if (this._tblCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._cardPurchaseDate = value;
					this.SendPropertyChanged("cardPurchaseDate");
					this.OncardPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activityDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime activityDate
		{
			get
			{
				return this._activityDate;
			}
			set
			{
				if ((this._activityDate != value))
				{
					this.OnactivityDateChanging(value);
					this.SendPropertyChanging();
					this._activityDate = value;
					this.SendPropertyChanged("activityDate");
					this.OnactivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_activityType", DbType="Char(1) NOT NULL")]
		public char activityType
		{
			get
			{
				return this._activityType;
			}
			set
			{
				if ((this._activityType != value))
				{
					this.OnactivityTypeChanging(value);
					this.SendPropertyChanging();
					this._activityType = value;
					this.SendPropertyChanged("activityType");
					this.OnactivityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stationID", DbType="SmallInt NOT NULL")]
		public short stationID
		{
			get
			{
				return this._stationID;
			}
			set
			{
				if ((this._stationID != value))
				{
					if ((this._tblStation.HasLoadedOrAssignedValue || this._tblStationInLine.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstationIDChanging(value);
					this.SendPropertyChanging();
					this._stationID = value;
					this.SendPropertyChanged("stationID");
					this.OnstationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string lineName
		{
			get
			{
				return this._lineName;
			}
			set
			{
				if ((this._lineName != value))
				{
					if ((this._tblLine.HasLoadedOrAssignedValue || this._tblStationInLine.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlineNameChanging(value);
					this.SendPropertyChanging();
					this._lineName = value;
					this.SendPropertyChanged("lineName");
					this.OnlineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCard_tblActivity", Storage="_tblCard", ThisKey="cardNumber,cardPurchaseDate", OtherKey="number,purchaseDate", IsForeignKey=true)]
		public tblCard tblCard
		{
			get
			{
				return this._tblCard.Entity;
			}
			set
			{
				tblCard previousValue = this._tblCard.Entity;
				if (((previousValue != value) 
							|| (this._tblCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCard.Entity = null;
						previousValue.tblActivities.Remove(this);
					}
					this._tblCard.Entity = value;
					if ((value != null))
					{
						value.tblActivities.Add(this);
						this._cardNumber = value.number;
						this._cardPurchaseDate = value.purchaseDate;
					}
					else
					{
						this._cardNumber = default(long);
						this._cardPurchaseDate = default(System.DateTime);
					}
					this.SendPropertyChanged("tblCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblActivity", Storage="_tblLine", ThisKey="lineName", OtherKey="name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblLine tblLine
		{
			get
			{
				return this._tblLine.Entity;
			}
			set
			{
				tblLine previousValue = this._tblLine.Entity;
				if (((previousValue != value) 
							|| (this._tblLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblLine.Entity = null;
						previousValue.tblActivities.Remove(this);
					}
					this._tblLine.Entity = value;
					if ((value != null))
					{
						value.tblActivities.Add(this);
						this._lineName = value.name;
					}
					else
					{
						this._lineName = default(string);
					}
					this.SendPropertyChanged("tblLine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStation_tblActivity", Storage="_tblStation", ThisKey="stationID", OtherKey="ID", IsForeignKey=true)]
		public tblStation tblStation
		{
			get
			{
				return this._tblStation.Entity;
			}
			set
			{
				tblStation previousValue = this._tblStation.Entity;
				if (((previousValue != value) 
							|| (this._tblStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStation.Entity = null;
						previousValue.tblActivities.Remove(this);
					}
					this._tblStation.Entity = value;
					if ((value != null))
					{
						value.tblActivities.Add(this);
						this._stationID = value.ID;
					}
					else
					{
						this._stationID = default(short);
					}
					this.SendPropertyChanged("tblStation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStationInLine_tblActivity", Storage="_tblStationInLine", ThisKey="stationID,lineName", OtherKey="stationID,lineName", IsForeignKey=true)]
		public tblStationInLine tblStationInLine
		{
			get
			{
				return this._tblStationInLine.Entity;
			}
			set
			{
				tblStationInLine previousValue = this._tblStationInLine.Entity;
				if (((previousValue != value) 
							|| (this._tblStationInLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStationInLine.Entity = null;
						previousValue.tblActivities.Remove(this);
					}
					this._tblStationInLine.Entity = value;
					if ((value != null))
					{
						value.tblActivities.Add(this);
						this._stationID = value.stationID;
						this._lineName = value.lineName;
					}
					else
					{
						this._stationID = default(short);
						this._lineName = default(string);
					}
					this.SendPropertyChanged("tblStationInLine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCard")]
	public partial class tblCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _number;
		
		private System.DateTime _purchaseDate;
		
		private EntitySet<tblActivity> _tblActivities;
		
		private EntityRef<tblOysterCard> _tblOysterCard;
		
		private EntityRef<tblPaperCard> _tblPaperCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumberChanging(long value);
    partial void OnnumberChanged();
    partial void OnpurchaseDateChanging(System.DateTime value);
    partial void OnpurchaseDateChanged();
    #endregion
		
		public tblCard()
		{
			this._tblActivities = new EntitySet<tblActivity>(new Action<tblActivity>(this.attach_tblActivities), new Action<tblActivity>(this.detach_tblActivities));
			this._tblOysterCard = default(EntityRef<tblOysterCard>);
			this._tblPaperCard = default(EntityRef<tblPaperCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purchaseDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime purchaseDate
		{
			get
			{
				return this._purchaseDate;
			}
			set
			{
				if ((this._purchaseDate != value))
				{
					this.OnpurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._purchaseDate = value;
					this.SendPropertyChanged("purchaseDate");
					this.OnpurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCard_tblActivity", Storage="_tblActivities", ThisKey="number,purchaseDate", OtherKey="cardNumber,cardPurchaseDate")]
		public EntitySet<tblActivity> tblActivities
		{
			get
			{
				return this._tblActivities;
			}
			set
			{
				this._tblActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCard_tblOysterCard", Storage="_tblOysterCard", ThisKey="number,purchaseDate", OtherKey="number,purchaseDate", IsUnique=true, IsForeignKey=false)]
		public tblOysterCard tblOysterCard
		{
			get
			{
				return this._tblOysterCard.Entity;
			}
			set
			{
				tblOysterCard previousValue = this._tblOysterCard.Entity;
				if (((previousValue != value) 
							|| (this._tblOysterCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblOysterCard.Entity = null;
						previousValue.tblCard = null;
					}
					this._tblOysterCard.Entity = value;
					if ((value != null))
					{
						value.tblCard = this;
					}
					this.SendPropertyChanged("tblOysterCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCard_tblPaperCard", Storage="_tblPaperCard", ThisKey="number,purchaseDate", OtherKey="number,purchaseDate", IsUnique=true, IsForeignKey=false)]
		public tblPaperCard tblPaperCard
		{
			get
			{
				return this._tblPaperCard.Entity;
			}
			set
			{
				tblPaperCard previousValue = this._tblPaperCard.Entity;
				if (((previousValue != value) 
							|| (this._tblPaperCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPaperCard.Entity = null;
						previousValue.tblCard = null;
					}
					this._tblPaperCard.Entity = value;
					if ((value != null))
					{
						value.tblCard = this;
					}
					this.SendPropertyChanged("tblPaperCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblCard = this;
		}
		
		private void detach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCardLengths")]
	public partial class tblCardLength : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _cardLength;
		
		private string _lengthDescription;
		
		private EntitySet<tblOysterCardArea> _tblOysterCardAreas;
		
		private EntitySet<tblPaperCardArea> _tblPaperCardAreas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardLengthChanging(char value);
    partial void OncardLengthChanged();
    partial void OnlengthDescriptionChanging(string value);
    partial void OnlengthDescriptionChanged();
    #endregion
		
		public tblCardLength()
		{
			this._tblOysterCardAreas = new EntitySet<tblOysterCardArea>(new Action<tblOysterCardArea>(this.attach_tblOysterCardAreas), new Action<tblOysterCardArea>(this.detach_tblOysterCardAreas));
			this._tblPaperCardAreas = new EntitySet<tblPaperCardArea>(new Action<tblPaperCardArea>(this.attach_tblPaperCardAreas), new Action<tblPaperCardArea>(this.detach_tblPaperCardAreas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardLength", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char cardLength
		{
			get
			{
				return this._cardLength;
			}
			set
			{
				if ((this._cardLength != value))
				{
					this.OncardLengthChanging(value);
					this.SendPropertyChanging();
					this._cardLength = value;
					this.SendPropertyChanged("cardLength");
					this.OncardLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lengthDescription", DbType="VarChar(20)")]
		public string lengthDescription
		{
			get
			{
				return this._lengthDescription;
			}
			set
			{
				if ((this._lengthDescription != value))
				{
					this.OnlengthDescriptionChanging(value);
					this.SendPropertyChanging();
					this._lengthDescription = value;
					this.SendPropertyChanged("lengthDescription");
					this.OnlengthDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCardLength_tblOysterCardArea", Storage="_tblOysterCardAreas", ThisKey="cardLength", OtherKey="cardLength")]
		public EntitySet<tblOysterCardArea> tblOysterCardAreas
		{
			get
			{
				return this._tblOysterCardAreas;
			}
			set
			{
				this._tblOysterCardAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCardLength_tblPaperCardArea", Storage="_tblPaperCardAreas", ThisKey="cardLength", OtherKey="cardLength")]
		public EntitySet<tblPaperCardArea> tblPaperCardAreas
		{
			get
			{
				return this._tblPaperCardAreas;
			}
			set
			{
				this._tblPaperCardAreas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblOysterCardAreas(tblOysterCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblCardLength = this;
		}
		
		private void detach_tblOysterCardAreas(tblOysterCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblCardLength = null;
		}
		
		private void attach_tblPaperCardAreas(tblPaperCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblCardLength = this;
		}
		
		private void detach_tblPaperCardAreas(tblPaperCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblCardLength = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblGeneralParameters")]
	public partial class tblGeneralParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _depositStartYear;
		
		private short _depositEndYear;
		
		private System.Nullable<byte> _price;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OndepositStartYearChanging(short value);
    partial void OndepositStartYearChanged();
    partial void OndepositEndYearChanging(short value);
    partial void OndepositEndYearChanged();
    partial void OnpriceChanging(System.Nullable<byte> value);
    partial void OnpriceChanged();
    #endregion
		
		public tblGeneralParameter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_depositStartYear", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short depositStartYear
		{
			get
			{
				return this._depositStartYear;
			}
			set
			{
				if ((this._depositStartYear != value))
				{
					this.OndepositStartYearChanging(value);
					this.SendPropertyChanging();
					this._depositStartYear = value;
					this.SendPropertyChanged("depositStartYear");
					this.OndepositStartYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_depositEndYear", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short depositEndYear
		{
			get
			{
				return this._depositEndYear;
			}
			set
			{
				if ((this._depositEndYear != value))
				{
					this.OndepositEndYearChanging(value);
					this.SendPropertyChanging();
					this._depositEndYear = value;
					this.SendPropertyChanged("depositEndYear");
					this.OndepositEndYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="TinyInt")]
		public System.Nullable<byte> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblLine")]
	public partial class tblLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private System.Nullable<short> _foundedYear;
		
		private System.Nullable<char> _lineType;
		
		private System.Nullable<float> _lineLength;
		
		private EntitySet<tblActivity> _tblActivities;
		
		private EntitySet<tblLineColor> _tblLineColors;
		
		private EntitySet<tblSiteFromExit> _tblSiteFromExits;
		
		private EntitySet<tblStationInLine> _tblStationInLines;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnfoundedYearChanging(System.Nullable<short> value);
    partial void OnfoundedYearChanged();
    partial void OnlineTypeChanging(System.Nullable<char> value);
    partial void OnlineTypeChanged();
    partial void OnlineLengthChanging(System.Nullable<float> value);
    partial void OnlineLengthChanged();
    #endregion
		
		public tblLine()
		{
			this._tblActivities = new EntitySet<tblActivity>(new Action<tblActivity>(this.attach_tblActivities), new Action<tblActivity>(this.detach_tblActivities));
			this._tblLineColors = new EntitySet<tblLineColor>(new Action<tblLineColor>(this.attach_tblLineColors), new Action<tblLineColor>(this.detach_tblLineColors));
			this._tblSiteFromExits = new EntitySet<tblSiteFromExit>(new Action<tblSiteFromExit>(this.attach_tblSiteFromExits), new Action<tblSiteFromExit>(this.detach_tblSiteFromExits));
			this._tblStationInLines = new EntitySet<tblStationInLine>(new Action<tblStationInLine>(this.attach_tblStationInLines), new Action<tblStationInLine>(this.detach_tblStationInLines));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foundedYear", DbType="SmallInt")]
		public System.Nullable<short> foundedYear
		{
			get
			{
				return this._foundedYear;
			}
			set
			{
				if ((this._foundedYear != value))
				{
					this.OnfoundedYearChanging(value);
					this.SendPropertyChanging();
					this._foundedYear = value;
					this.SendPropertyChanged("foundedYear");
					this.OnfoundedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineType", DbType="Char(1)")]
		public System.Nullable<char> lineType
		{
			get
			{
				return this._lineType;
			}
			set
			{
				if ((this._lineType != value))
				{
					this.OnlineTypeChanging(value);
					this.SendPropertyChanging();
					this._lineType = value;
					this.SendPropertyChanged("lineType");
					this.OnlineTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineLength", DbType="Real")]
		public System.Nullable<float> lineLength
		{
			get
			{
				return this._lineLength;
			}
			set
			{
				if ((this._lineLength != value))
				{
					this.OnlineLengthChanging(value);
					this.SendPropertyChanging();
					this._lineLength = value;
					this.SendPropertyChanged("lineLength");
					this.OnlineLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblActivity", Storage="_tblActivities", ThisKey="name", OtherKey="lineName")]
		public EntitySet<tblActivity> tblActivities
		{
			get
			{
				return this._tblActivities;
			}
			set
			{
				this._tblActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblLineColor", Storage="_tblLineColors", ThisKey="name", OtherKey="lineName")]
		public EntitySet<tblLineColor> tblLineColors
		{
			get
			{
				return this._tblLineColors;
			}
			set
			{
				this._tblLineColors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblSiteFromExit", Storage="_tblSiteFromExits", ThisKey="name", OtherKey="lineName")]
		public EntitySet<tblSiteFromExit> tblSiteFromExits
		{
			get
			{
				return this._tblSiteFromExits;
			}
			set
			{
				this._tblSiteFromExits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblStationInLine", Storage="_tblStationInLines", ThisKey="name", OtherKey="lineName")]
		public EntitySet<tblStationInLine> tblStationInLines
		{
			get
			{
				return this._tblStationInLines;
			}
			set
			{
				this._tblStationInLines.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = this;
		}
		
		private void detach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = null;
		}
		
		private void attach_tblLineColors(tblLineColor entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = this;
		}
		
		private void detach_tblLineColors(tblLineColor entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = null;
		}
		
		private void attach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = this;
		}
		
		private void detach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = null;
		}
		
		private void attach_tblStationInLines(tblStationInLine entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = this;
		}
		
		private void detach_tblStationInLines(tblStationInLine entity)
		{
			this.SendPropertyChanging();
			entity.tblLine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblLineColor")]
	public partial class tblLineColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _name;
		
		private string _lineName;
		
		private EntityRef<tblLine> _tblLine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnlineNameChanging(string value);
    partial void OnlineNameChanged();
    #endregion
		
		public tblLineColor()
		{
			this._tblLine = default(EntityRef<tblLine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string lineName
		{
			get
			{
				return this._lineName;
			}
			set
			{
				if ((this._lineName != value))
				{
					if (this._tblLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlineNameChanging(value);
					this.SendPropertyChanging();
					this._lineName = value;
					this.SendPropertyChanged("lineName");
					this.OnlineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblLineColor", Storage="_tblLine", ThisKey="lineName", OtherKey="name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblLine tblLine
		{
			get
			{
				return this._tblLine.Entity;
			}
			set
			{
				tblLine previousValue = this._tblLine.Entity;
				if (((previousValue != value) 
							|| (this._tblLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblLine.Entity = null;
						previousValue.tblLineColors.Remove(this);
					}
					this._tblLine.Entity = value;
					if ((value != null))
					{
						value.tblLineColors.Add(this);
						this._lineName = value.name;
					}
					else
					{
						this._lineName = default(string);
					}
					this.SendPropertyChanged("tblLine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblOysterCard")]
	public partial class tblOysterCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _number;
		
		private System.DateTime _purchaseDate;
		
		private System.Data.Linq.Binary _picture;
		
		private EntitySet<tblOysterCardArea> _tblOysterCardAreas;
		
		private EntityRef<tblCard> _tblCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumberChanging(long value);
    partial void OnnumberChanged();
    partial void OnpurchaseDateChanging(System.DateTime value);
    partial void OnpurchaseDateChanged();
    partial void OnpictureChanging(System.Data.Linq.Binary value);
    partial void OnpictureChanged();
    #endregion
		
		public tblOysterCard()
		{
			this._tblOysterCardAreas = new EntitySet<tblOysterCardArea>(new Action<tblOysterCardArea>(this.attach_tblOysterCardAreas), new Action<tblOysterCardArea>(this.detach_tblOysterCardAreas));
			this._tblCard = default(EntityRef<tblCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					if (this._tblCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purchaseDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime purchaseDate
		{
			get
			{
				return this._purchaseDate;
			}
			set
			{
				if ((this._purchaseDate != value))
				{
					if (this._tblCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._purchaseDate = value;
					this.SendPropertyChanged("purchaseDate");
					this.OnpurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_picture", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary picture
		{
			get
			{
				return this._picture;
			}
			set
			{
				if ((this._picture != value))
				{
					this.OnpictureChanging(value);
					this.SendPropertyChanging();
					this._picture = value;
					this.SendPropertyChanged("picture");
					this.OnpictureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblOysterCard_tblOysterCardArea", Storage="_tblOysterCardAreas", ThisKey="number,purchaseDate", OtherKey="cardNumber,cardPurchaseDate")]
		public EntitySet<tblOysterCardArea> tblOysterCardAreas
		{
			get
			{
				return this._tblOysterCardAreas;
			}
			set
			{
				this._tblOysterCardAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCard_tblOysterCard", Storage="_tblCard", ThisKey="number,purchaseDate", OtherKey="number,purchaseDate", IsForeignKey=true)]
		public tblCard tblCard
		{
			get
			{
				return this._tblCard.Entity;
			}
			set
			{
				tblCard previousValue = this._tblCard.Entity;
				if (((previousValue != value) 
							|| (this._tblCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCard.Entity = null;
						previousValue.tblOysterCard = null;
					}
					this._tblCard.Entity = value;
					if ((value != null))
					{
						value.tblOysterCard = this;
						this._number = value.number;
						this._purchaseDate = value.purchaseDate;
					}
					else
					{
						this._number = default(long);
						this._purchaseDate = default(System.DateTime);
					}
					this.SendPropertyChanged("tblCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblOysterCardAreas(tblOysterCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblOysterCard = this;
		}
		
		private void detach_tblOysterCardAreas(tblOysterCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblOysterCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblOysterCardAreas")]
	public partial class tblOysterCardArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _cardNumber;
		
		private System.DateTime _cardPurchaseDate;
		
		private char _zoneNumber;
		
		private char _cardLength;
		
		private EntityRef<tblCardLength> _tblCardLength;
		
		private EntityRef<tblOysterCard> _tblOysterCard;
		
		private EntityRef<tblZone> _tblZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardNumberChanging(long value);
    partial void OncardNumberChanged();
    partial void OncardPurchaseDateChanging(System.DateTime value);
    partial void OncardPurchaseDateChanged();
    partial void OnzoneNumberChanging(char value);
    partial void OnzoneNumberChanged();
    partial void OncardLengthChanging(char value);
    partial void OncardLengthChanged();
    #endregion
		
		public tblOysterCardArea()
		{
			this._tblCardLength = default(EntityRef<tblCardLength>);
			this._tblOysterCard = default(EntityRef<tblOysterCard>);
			this._tblZone = default(EntityRef<tblZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardNumber", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long cardNumber
		{
			get
			{
				return this._cardNumber;
			}
			set
			{
				if ((this._cardNumber != value))
				{
					if (this._tblOysterCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardNumberChanging(value);
					this.SendPropertyChanging();
					this._cardNumber = value;
					this.SendPropertyChanged("cardNumber");
					this.OncardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardPurchaseDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime cardPurchaseDate
		{
			get
			{
				return this._cardPurchaseDate;
			}
			set
			{
				if ((this._cardPurchaseDate != value))
				{
					if (this._tblOysterCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._cardPurchaseDate = value;
					this.SendPropertyChanged("cardPurchaseDate");
					this.OncardPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneNumber", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char zoneNumber
		{
			get
			{
				return this._zoneNumber;
			}
			set
			{
				if ((this._zoneNumber != value))
				{
					if (this._tblZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzoneNumberChanging(value);
					this.SendPropertyChanging();
					this._zoneNumber = value;
					this.SendPropertyChanged("zoneNumber");
					this.OnzoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardLength", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char cardLength
		{
			get
			{
				return this._cardLength;
			}
			set
			{
				if ((this._cardLength != value))
				{
					if (this._tblCardLength.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardLengthChanging(value);
					this.SendPropertyChanging();
					this._cardLength = value;
					this.SendPropertyChanged("cardLength");
					this.OncardLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCardLength_tblOysterCardArea", Storage="_tblCardLength", ThisKey="cardLength", OtherKey="cardLength", IsForeignKey=true)]
		public tblCardLength tblCardLength
		{
			get
			{
				return this._tblCardLength.Entity;
			}
			set
			{
				tblCardLength previousValue = this._tblCardLength.Entity;
				if (((previousValue != value) 
							|| (this._tblCardLength.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCardLength.Entity = null;
						previousValue.tblOysterCardAreas.Remove(this);
					}
					this._tblCardLength.Entity = value;
					if ((value != null))
					{
						value.tblOysterCardAreas.Add(this);
						this._cardLength = value.cardLength;
					}
					else
					{
						this._cardLength = default(char);
					}
					this.SendPropertyChanged("tblCardLength");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblOysterCard_tblOysterCardArea", Storage="_tblOysterCard", ThisKey="cardNumber,cardPurchaseDate", OtherKey="number,purchaseDate", IsForeignKey=true)]
		public tblOysterCard tblOysterCard
		{
			get
			{
				return this._tblOysterCard.Entity;
			}
			set
			{
				tblOysterCard previousValue = this._tblOysterCard.Entity;
				if (((previousValue != value) 
							|| (this._tblOysterCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblOysterCard.Entity = null;
						previousValue.tblOysterCardAreas.Remove(this);
					}
					this._tblOysterCard.Entity = value;
					if ((value != null))
					{
						value.tblOysterCardAreas.Add(this);
						this._cardNumber = value.number;
						this._cardPurchaseDate = value.purchaseDate;
					}
					else
					{
						this._cardNumber = default(long);
						this._cardPurchaseDate = default(System.DateTime);
					}
					this.SendPropertyChanged("tblOysterCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblZone_tblOysterCardArea", Storage="_tblZone", ThisKey="zoneNumber", OtherKey="number", IsForeignKey=true)]
		public tblZone tblZone
		{
			get
			{
				return this._tblZone.Entity;
			}
			set
			{
				tblZone previousValue = this._tblZone.Entity;
				if (((previousValue != value) 
							|| (this._tblZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblZone.Entity = null;
						previousValue.tblOysterCardAreas.Remove(this);
					}
					this._tblZone.Entity = value;
					if ((value != null))
					{
						value.tblOysterCardAreas.Add(this);
						this._zoneNumber = value.number;
					}
					else
					{
						this._zoneNumber = default(char);
					}
					this.SendPropertyChanged("tblZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPaperCard")]
	public partial class tblPaperCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _number;
		
		private System.DateTime _purchaseDate;
		
		private bool _isTourist;
		
		private EntitySet<tblPaperCardArea> _tblPaperCardAreas;
		
		private EntityRef<tblCard> _tblCard;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumberChanging(long value);
    partial void OnnumberChanged();
    partial void OnpurchaseDateChanging(System.DateTime value);
    partial void OnpurchaseDateChanged();
    partial void OnisTouristChanging(bool value);
    partial void OnisTouristChanged();
    #endregion
		
		public tblPaperCard()
		{
			this._tblPaperCardAreas = new EntitySet<tblPaperCardArea>(new Action<tblPaperCardArea>(this.attach_tblPaperCardAreas), new Action<tblPaperCardArea>(this.detach_tblPaperCardAreas));
			this._tblCard = default(EntityRef<tblCard>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					if (this._tblCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_purchaseDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime purchaseDate
		{
			get
			{
				return this._purchaseDate;
			}
			set
			{
				if ((this._purchaseDate != value))
				{
					if (this._tblCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._purchaseDate = value;
					this.SendPropertyChanged("purchaseDate");
					this.OnpurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isTourist", DbType="Bit NOT NULL")]
		public bool isTourist
		{
			get
			{
				return this._isTourist;
			}
			set
			{
				if ((this._isTourist != value))
				{
					this.OnisTouristChanging(value);
					this.SendPropertyChanging();
					this._isTourist = value;
					this.SendPropertyChanged("isTourist");
					this.OnisTouristChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPaperCard_tblPaperCardArea", Storage="_tblPaperCardAreas", ThisKey="number,purchaseDate", OtherKey="cardNumber,cardPurchaseDate")]
		public EntitySet<tblPaperCardArea> tblPaperCardAreas
		{
			get
			{
				return this._tblPaperCardAreas;
			}
			set
			{
				this._tblPaperCardAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCard_tblPaperCard", Storage="_tblCard", ThisKey="number,purchaseDate", OtherKey="number,purchaseDate", IsForeignKey=true)]
		public tblCard tblCard
		{
			get
			{
				return this._tblCard.Entity;
			}
			set
			{
				tblCard previousValue = this._tblCard.Entity;
				if (((previousValue != value) 
							|| (this._tblCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCard.Entity = null;
						previousValue.tblPaperCard = null;
					}
					this._tblCard.Entity = value;
					if ((value != null))
					{
						value.tblPaperCard = this;
						this._number = value.number;
						this._purchaseDate = value.purchaseDate;
					}
					else
					{
						this._number = default(long);
						this._purchaseDate = default(System.DateTime);
					}
					this.SendPropertyChanged("tblCard");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPaperCardAreas(tblPaperCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblPaperCard = this;
		}
		
		private void detach_tblPaperCardAreas(tblPaperCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblPaperCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPaperCardAreas")]
	public partial class tblPaperCardArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _cardNumber;
		
		private System.DateTime _cardPurchaseDate;
		
		private char _zoneNumber;
		
		private char _cardLength;
		
		private EntityRef<tblCardLength> _tblCardLength;
		
		private EntityRef<tblPaperCard> _tblPaperCard;
		
		private EntityRef<tblZone> _tblZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardNumberChanging(long value);
    partial void OncardNumberChanged();
    partial void OncardPurchaseDateChanging(System.DateTime value);
    partial void OncardPurchaseDateChanged();
    partial void OnzoneNumberChanging(char value);
    partial void OnzoneNumberChanged();
    partial void OncardLengthChanging(char value);
    partial void OncardLengthChanged();
    #endregion
		
		public tblPaperCardArea()
		{
			this._tblCardLength = default(EntityRef<tblCardLength>);
			this._tblPaperCard = default(EntityRef<tblPaperCard>);
			this._tblZone = default(EntityRef<tblZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardNumber", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long cardNumber
		{
			get
			{
				return this._cardNumber;
			}
			set
			{
				if ((this._cardNumber != value))
				{
					if (this._tblPaperCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardNumberChanging(value);
					this.SendPropertyChanging();
					this._cardNumber = value;
					this.SendPropertyChanged("cardNumber");
					this.OncardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardPurchaseDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime cardPurchaseDate
		{
			get
			{
				return this._cardPurchaseDate;
			}
			set
			{
				if ((this._cardPurchaseDate != value))
				{
					if (this._tblPaperCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardPurchaseDateChanging(value);
					this.SendPropertyChanging();
					this._cardPurchaseDate = value;
					this.SendPropertyChanged("cardPurchaseDate");
					this.OncardPurchaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneNumber", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char zoneNumber
		{
			get
			{
				return this._zoneNumber;
			}
			set
			{
				if ((this._zoneNumber != value))
				{
					if (this._tblZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzoneNumberChanging(value);
					this.SendPropertyChanging();
					this._zoneNumber = value;
					this.SendPropertyChanged("zoneNumber");
					this.OnzoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardLength", DbType="Char(1) NOT NULL")]
		public char cardLength
		{
			get
			{
				return this._cardLength;
			}
			set
			{
				if ((this._cardLength != value))
				{
					if (this._tblCardLength.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardLengthChanging(value);
					this.SendPropertyChanging();
					this._cardLength = value;
					this.SendPropertyChanged("cardLength");
					this.OncardLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCardLength_tblPaperCardArea", Storage="_tblCardLength", ThisKey="cardLength", OtherKey="cardLength", IsForeignKey=true)]
		public tblCardLength tblCardLength
		{
			get
			{
				return this._tblCardLength.Entity;
			}
			set
			{
				tblCardLength previousValue = this._tblCardLength.Entity;
				if (((previousValue != value) 
							|| (this._tblCardLength.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCardLength.Entity = null;
						previousValue.tblPaperCardAreas.Remove(this);
					}
					this._tblCardLength.Entity = value;
					if ((value != null))
					{
						value.tblPaperCardAreas.Add(this);
						this._cardLength = value.cardLength;
					}
					else
					{
						this._cardLength = default(char);
					}
					this.SendPropertyChanged("tblCardLength");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblPaperCard_tblPaperCardArea", Storage="_tblPaperCard", ThisKey="cardNumber,cardPurchaseDate", OtherKey="number,purchaseDate", IsForeignKey=true)]
		public tblPaperCard tblPaperCard
		{
			get
			{
				return this._tblPaperCard.Entity;
			}
			set
			{
				tblPaperCard previousValue = this._tblPaperCard.Entity;
				if (((previousValue != value) 
							|| (this._tblPaperCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPaperCard.Entity = null;
						previousValue.tblPaperCardAreas.Remove(this);
					}
					this._tblPaperCard.Entity = value;
					if ((value != null))
					{
						value.tblPaperCardAreas.Add(this);
						this._cardNumber = value.number;
						this._cardPurchaseDate = value.purchaseDate;
					}
					else
					{
						this._cardNumber = default(long);
						this._cardPurchaseDate = default(System.DateTime);
					}
					this.SendPropertyChanged("tblPaperCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblZone_tblPaperCardArea", Storage="_tblZone", ThisKey="zoneNumber", OtherKey="number", IsForeignKey=true)]
		public tblZone tblZone
		{
			get
			{
				return this._tblZone.Entity;
			}
			set
			{
				tblZone previousValue = this._tblZone.Entity;
				if (((previousValue != value) 
							|| (this._tblZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblZone.Entity = null;
						previousValue.tblPaperCardAreas.Remove(this);
					}
					this._tblZone.Entity = value;
					if ((value != null))
					{
						value.tblPaperCardAreas.Add(this);
						this._zoneNumber = value.number;
					}
					else
					{
						this._zoneNumber = default(char);
					}
					this.SendPropertyChanged("tblZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSite")]
	public partial class tblSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _name;
		
		private string _siteDescription;
		
		private System.Nullable<short> _foundedYear;
		
		private string _siteType;
		
		private EntitySet<tblSiteFromExit> _tblSiteFromExits;
		
		private EntitySet<tblSiteFromSite> _tblSiteFromSites;
		
		private EntitySet<tblSiteFromSite> _tblSiteFromSites1;
		
		private EntityRef<tblSiteType> _tblSiteType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsiteDescriptionChanging(string value);
    partial void OnsiteDescriptionChanged();
    partial void OnfoundedYearChanging(System.Nullable<short> value);
    partial void OnfoundedYearChanged();
    partial void OnsiteTypeChanging(string value);
    partial void OnsiteTypeChanged();
    #endregion
		
		public tblSite()
		{
			this._tblSiteFromExits = new EntitySet<tblSiteFromExit>(new Action<tblSiteFromExit>(this.attach_tblSiteFromExits), new Action<tblSiteFromExit>(this.detach_tblSiteFromExits));
			this._tblSiteFromSites = new EntitySet<tblSiteFromSite>(new Action<tblSiteFromSite>(this.attach_tblSiteFromSites), new Action<tblSiteFromSite>(this.detach_tblSiteFromSites));
			this._tblSiteFromSites1 = new EntitySet<tblSiteFromSite>(new Action<tblSiteFromSite>(this.attach_tblSiteFromSites1), new Action<tblSiteFromSite>(this.detach_tblSiteFromSites1));
			this._tblSiteType = default(EntityRef<tblSiteType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(20)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siteDescription", DbType="VarChar(150)")]
		public string siteDescription
		{
			get
			{
				return this._siteDescription;
			}
			set
			{
				if ((this._siteDescription != value))
				{
					this.OnsiteDescriptionChanging(value);
					this.SendPropertyChanging();
					this._siteDescription = value;
					this.SendPropertyChanged("siteDescription");
					this.OnsiteDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_foundedYear", DbType="SmallInt")]
		public System.Nullable<short> foundedYear
		{
			get
			{
				return this._foundedYear;
			}
			set
			{
				if ((this._foundedYear != value))
				{
					this.OnfoundedYearChanging(value);
					this.SendPropertyChanging();
					this._foundedYear = value;
					this.SendPropertyChanged("foundedYear");
					this.OnfoundedYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siteType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string siteType
		{
			get
			{
				return this._siteType;
			}
			set
			{
				if ((this._siteType != value))
				{
					if (this._tblSiteType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsiteTypeChanging(value);
					this.SendPropertyChanging();
					this._siteType = value;
					this.SendPropertyChanged("siteType");
					this.OnsiteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSite_tblSiteFromExit", Storage="_tblSiteFromExits", ThisKey="ID", OtherKey="siteID")]
		public EntitySet<tblSiteFromExit> tblSiteFromExits
		{
			get
			{
				return this._tblSiteFromExits;
			}
			set
			{
				this._tblSiteFromExits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSite_tblSiteFromSite", Storage="_tblSiteFromSites", ThisKey="ID", OtherKey="siteID1")]
		public EntitySet<tblSiteFromSite> tblSiteFromSites
		{
			get
			{
				return this._tblSiteFromSites;
			}
			set
			{
				this._tblSiteFromSites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSite_tblSiteFromSite1", Storage="_tblSiteFromSites1", ThisKey="ID", OtherKey="siteID2")]
		public EntitySet<tblSiteFromSite> tblSiteFromSites1
		{
			get
			{
				return this._tblSiteFromSites1;
			}
			set
			{
				this._tblSiteFromSites1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSiteType_tblSite", Storage="_tblSiteType", ThisKey="siteType", OtherKey="siteType", IsForeignKey=true)]
		public tblSiteType tblSiteType
		{
			get
			{
				return this._tblSiteType.Entity;
			}
			set
			{
				tblSiteType previousValue = this._tblSiteType.Entity;
				if (((previousValue != value) 
							|| (this._tblSiteType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSiteType.Entity = null;
						previousValue.tblSites.Remove(this);
					}
					this._tblSiteType.Entity = value;
					if ((value != null))
					{
						value.tblSites.Add(this);
						this._siteType = value.siteType;
					}
					else
					{
						this._siteType = default(string);
					}
					this.SendPropertyChanged("tblSiteType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblSite = this;
		}
		
		private void detach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblSite = null;
		}
		
		private void attach_tblSiteFromSites(tblSiteFromSite entity)
		{
			this.SendPropertyChanging();
			entity.tblSite = this;
		}
		
		private void detach_tblSiteFromSites(tblSiteFromSite entity)
		{
			this.SendPropertyChanging();
			entity.tblSite = null;
		}
		
		private void attach_tblSiteFromSites1(tblSiteFromSite entity)
		{
			this.SendPropertyChanging();
			entity.tblSite1 = this;
		}
		
		private void detach_tblSiteFromSites1(tblSiteFromSite entity)
		{
			this.SendPropertyChanging();
			entity.tblSite1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSiteFromExit")]
	public partial class tblSiteFromExit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _siteID;
		
		private short _stationID;
		
		private string _lineName;
		
		private System.Nullable<float> _distance;
		
		private EntityRef<tblLine> _tblLine;
		
		private EntityRef<tblSite> _tblSite;
		
		private EntityRef<tblStation> _tblStation;
		
		private EntityRef<tblStationInLine> _tblStationInLine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsiteIDChanging(short value);
    partial void OnsiteIDChanged();
    partial void OnstationIDChanging(short value);
    partial void OnstationIDChanged();
    partial void OnlineNameChanging(string value);
    partial void OnlineNameChanged();
    partial void OndistanceChanging(System.Nullable<float> value);
    partial void OndistanceChanged();
    #endregion
		
		public tblSiteFromExit()
		{
			this._tblLine = default(EntityRef<tblLine>);
			this._tblSite = default(EntityRef<tblSite>);
			this._tblStation = default(EntityRef<tblStation>);
			this._tblStationInLine = default(EntityRef<tblStationInLine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siteID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short siteID
		{
			get
			{
				return this._siteID;
			}
			set
			{
				if ((this._siteID != value))
				{
					if (this._tblSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsiteIDChanging(value);
					this.SendPropertyChanging();
					this._siteID = value;
					this.SendPropertyChanged("siteID");
					this.OnsiteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stationID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short stationID
		{
			get
			{
				return this._stationID;
			}
			set
			{
				if ((this._stationID != value))
				{
					if ((this._tblStation.HasLoadedOrAssignedValue || this._tblStationInLine.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstationIDChanging(value);
					this.SendPropertyChanging();
					this._stationID = value;
					this.SendPropertyChanged("stationID");
					this.OnstationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineName", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string lineName
		{
			get
			{
				return this._lineName;
			}
			set
			{
				if ((this._lineName != value))
				{
					if ((this._tblLine.HasLoadedOrAssignedValue || this._tblStationInLine.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlineNameChanging(value);
					this.SendPropertyChanging();
					this._lineName = value;
					this.SendPropertyChanged("lineName");
					this.OnlineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Real")]
		public System.Nullable<float> distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this.OndistanceChanging(value);
					this.SendPropertyChanging();
					this._distance = value;
					this.SendPropertyChanged("distance");
					this.OndistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblSiteFromExit", Storage="_tblLine", ThisKey="lineName", OtherKey="name", IsForeignKey=true)]
		public tblLine tblLine
		{
			get
			{
				return this._tblLine.Entity;
			}
			set
			{
				tblLine previousValue = this._tblLine.Entity;
				if (((previousValue != value) 
							|| (this._tblLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblLine.Entity = null;
						previousValue.tblSiteFromExits.Remove(this);
					}
					this._tblLine.Entity = value;
					if ((value != null))
					{
						value.tblSiteFromExits.Add(this);
						this._lineName = value.name;
					}
					else
					{
						this._lineName = default(string);
					}
					this.SendPropertyChanged("tblLine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSite_tblSiteFromExit", Storage="_tblSite", ThisKey="siteID", OtherKey="ID", IsForeignKey=true)]
		public tblSite tblSite
		{
			get
			{
				return this._tblSite.Entity;
			}
			set
			{
				tblSite previousValue = this._tblSite.Entity;
				if (((previousValue != value) 
							|| (this._tblSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSite.Entity = null;
						previousValue.tblSiteFromExits.Remove(this);
					}
					this._tblSite.Entity = value;
					if ((value != null))
					{
						value.tblSiteFromExits.Add(this);
						this._siteID = value.ID;
					}
					else
					{
						this._siteID = default(short);
					}
					this.SendPropertyChanged("tblSite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStation_tblSiteFromExit", Storage="_tblStation", ThisKey="stationID", OtherKey="ID", IsForeignKey=true)]
		public tblStation tblStation
		{
			get
			{
				return this._tblStation.Entity;
			}
			set
			{
				tblStation previousValue = this._tblStation.Entity;
				if (((previousValue != value) 
							|| (this._tblStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStation.Entity = null;
						previousValue.tblSiteFromExits.Remove(this);
					}
					this._tblStation.Entity = value;
					if ((value != null))
					{
						value.tblSiteFromExits.Add(this);
						this._stationID = value.ID;
					}
					else
					{
						this._stationID = default(short);
					}
					this.SendPropertyChanged("tblStation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStationInLine_tblSiteFromExit", Storage="_tblStationInLine", ThisKey="stationID,lineName", OtherKey="stationID,lineName", IsForeignKey=true)]
		public tblStationInLine tblStationInLine
		{
			get
			{
				return this._tblStationInLine.Entity;
			}
			set
			{
				tblStationInLine previousValue = this._tblStationInLine.Entity;
				if (((previousValue != value) 
							|| (this._tblStationInLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStationInLine.Entity = null;
						previousValue.tblSiteFromExits.Remove(this);
					}
					this._tblStationInLine.Entity = value;
					if ((value != null))
					{
						value.tblSiteFromExits.Add(this);
						this._stationID = value.stationID;
						this._lineName = value.lineName;
					}
					else
					{
						this._stationID = default(short);
						this._lineName = default(string);
					}
					this.SendPropertyChanged("tblStationInLine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSiteType")]
	public partial class tblSiteType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _siteType;
		
		private EntitySet<tblSite> _tblSites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsiteTypeChanging(string value);
    partial void OnsiteTypeChanged();
    #endregion
		
		public tblSiteType()
		{
			this._tblSites = new EntitySet<tblSite>(new Action<tblSite>(this.attach_tblSites), new Action<tblSite>(this.detach_tblSites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siteType", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string siteType
		{
			get
			{
				return this._siteType;
			}
			set
			{
				if ((this._siteType != value))
				{
					this.OnsiteTypeChanging(value);
					this.SendPropertyChanging();
					this._siteType = value;
					this.SendPropertyChanged("siteType");
					this.OnsiteTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSiteType_tblSite", Storage="_tblSites", ThisKey="siteType", OtherKey="siteType")]
		public EntitySet<tblSite> tblSites
		{
			get
			{
				return this._tblSites;
			}
			set
			{
				this._tblSites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblSites(tblSite entity)
		{
			this.SendPropertyChanging();
			entity.tblSiteType = this;
		}
		
		private void detach_tblSites(tblSite entity)
		{
			this.SendPropertyChanging();
			entity.tblSiteType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStation")]
	public partial class tblStation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _name;
		
		private System.Nullable<byte> _platformNum;
		
		private bool _kiosk;
		
		private System.Nullable<char> _zoneNumber;
		
		private EntitySet<tblActivity> _tblActivities;
		
		private EntitySet<tblSiteFromExit> _tblSiteFromExits;
		
		private EntitySet<tblStationInLine> _tblStationInLines;
		
		private EntityRef<tblZone> _tblZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnplatformNumChanging(System.Nullable<byte> value);
    partial void OnplatformNumChanged();
    partial void OnkioskChanging(bool value);
    partial void OnkioskChanged();
    partial void OnzoneNumberChanging(System.Nullable<char> value);
    partial void OnzoneNumberChanged();
    #endregion
		
		public tblStation()
		{
			this._tblActivities = new EntitySet<tblActivity>(new Action<tblActivity>(this.attach_tblActivities), new Action<tblActivity>(this.detach_tblActivities));
			this._tblSiteFromExits = new EntitySet<tblSiteFromExit>(new Action<tblSiteFromExit>(this.attach_tblSiteFromExits), new Action<tblSiteFromExit>(this.detach_tblSiteFromExits));
			this._tblStationInLines = new EntitySet<tblStationInLine>(new Action<tblStationInLine>(this.attach_tblStationInLines), new Action<tblStationInLine>(this.detach_tblStationInLines));
			this._tblZone = default(EntityRef<tblZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_platformNum", DbType="TinyInt")]
		public System.Nullable<byte> platformNum
		{
			get
			{
				return this._platformNum;
			}
			set
			{
				if ((this._platformNum != value))
				{
					this.OnplatformNumChanging(value);
					this.SendPropertyChanging();
					this._platformNum = value;
					this.SendPropertyChanged("platformNum");
					this.OnplatformNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_kiosk", DbType="Bit NOT NULL")]
		public bool kiosk
		{
			get
			{
				return this._kiosk;
			}
			set
			{
				if ((this._kiosk != value))
				{
					this.OnkioskChanging(value);
					this.SendPropertyChanging();
					this._kiosk = value;
					this.SendPropertyChanged("kiosk");
					this.OnkioskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zoneNumber", DbType="Char(1)")]
		public System.Nullable<char> zoneNumber
		{
			get
			{
				return this._zoneNumber;
			}
			set
			{
				if ((this._zoneNumber != value))
				{
					if (this._tblZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzoneNumberChanging(value);
					this.SendPropertyChanging();
					this._zoneNumber = value;
					this.SendPropertyChanged("zoneNumber");
					this.OnzoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStation_tblActivity", Storage="_tblActivities", ThisKey="ID", OtherKey="stationID")]
		public EntitySet<tblActivity> tblActivities
		{
			get
			{
				return this._tblActivities;
			}
			set
			{
				this._tblActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStation_tblSiteFromExit", Storage="_tblSiteFromExits", ThisKey="ID", OtherKey="stationID")]
		public EntitySet<tblSiteFromExit> tblSiteFromExits
		{
			get
			{
				return this._tblSiteFromExits;
			}
			set
			{
				this._tblSiteFromExits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStation_tblStationInLine", Storage="_tblStationInLines", ThisKey="ID", OtherKey="stationID")]
		public EntitySet<tblStationInLine> tblStationInLines
		{
			get
			{
				return this._tblStationInLines;
			}
			set
			{
				this._tblStationInLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblZone_tblStation", Storage="_tblZone", ThisKey="zoneNumber", OtherKey="number", IsForeignKey=true, DeleteRule="CASCADE")]
		public tblZone tblZone
		{
			get
			{
				return this._tblZone.Entity;
			}
			set
			{
				tblZone previousValue = this._tblZone.Entity;
				if (((previousValue != value) 
							|| (this._tblZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblZone.Entity = null;
						previousValue.tblStations.Remove(this);
					}
					this._tblZone.Entity = value;
					if ((value != null))
					{
						value.tblStations.Add(this);
						this._zoneNumber = value.number;
					}
					else
					{
						this._zoneNumber = default(Nullable<char>);
					}
					this.SendPropertyChanged("tblZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblStation = this;
		}
		
		private void detach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblStation = null;
		}
		
		private void attach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblStation = this;
		}
		
		private void detach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblStation = null;
		}
		
		private void attach_tblStationInLines(tblStationInLine entity)
		{
			this.SendPropertyChanging();
			entity.tblStation = this;
		}
		
		private void detach_tblStationInLines(tblStationInLine entity)
		{
			this.SendPropertyChanging();
			entity.tblStation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblStationInLine")]
	public partial class tblStationInLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _stationID;
		
		private string _lineName;
		
		private EntitySet<tblActivity> _tblActivities;
		
		private EntitySet<tblSiteFromExit> _tblSiteFromExits;
		
		private EntityRef<tblLine> _tblLine;
		
		private EntityRef<tblStation> _tblStation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstationIDChanging(short value);
    partial void OnstationIDChanged();
    partial void OnlineNameChanging(string value);
    partial void OnlineNameChanged();
    #endregion
		
		public tblStationInLine()
		{
			this._tblActivities = new EntitySet<tblActivity>(new Action<tblActivity>(this.attach_tblActivities), new Action<tblActivity>(this.detach_tblActivities));
			this._tblSiteFromExits = new EntitySet<tblSiteFromExit>(new Action<tblSiteFromExit>(this.attach_tblSiteFromExits), new Action<tblSiteFromExit>(this.detach_tblSiteFromExits));
			this._tblLine = default(EntityRef<tblLine>);
			this._tblStation = default(EntityRef<tblStation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stationID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short stationID
		{
			get
			{
				return this._stationID;
			}
			set
			{
				if ((this._stationID != value))
				{
					if (this._tblStation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstationIDChanging(value);
					this.SendPropertyChanging();
					this._stationID = value;
					this.SendPropertyChanged("stationID");
					this.OnstationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineName", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string lineName
		{
			get
			{
				return this._lineName;
			}
			set
			{
				if ((this._lineName != value))
				{
					if (this._tblLine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlineNameChanging(value);
					this.SendPropertyChanging();
					this._lineName = value;
					this.SendPropertyChanged("lineName");
					this.OnlineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStationInLine_tblActivity", Storage="_tblActivities", ThisKey="stationID,lineName", OtherKey="stationID,lineName")]
		public EntitySet<tblActivity> tblActivities
		{
			get
			{
				return this._tblActivities;
			}
			set
			{
				this._tblActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStationInLine_tblSiteFromExit", Storage="_tblSiteFromExits", ThisKey="stationID,lineName", OtherKey="stationID,lineName")]
		public EntitySet<tblSiteFromExit> tblSiteFromExits
		{
			get
			{
				return this._tblSiteFromExits;
			}
			set
			{
				this._tblSiteFromExits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLine_tblStationInLine", Storage="_tblLine", ThisKey="lineName", OtherKey="name", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblLine tblLine
		{
			get
			{
				return this._tblLine.Entity;
			}
			set
			{
				tblLine previousValue = this._tblLine.Entity;
				if (((previousValue != value) 
							|| (this._tblLine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblLine.Entity = null;
						previousValue.tblStationInLines.Remove(this);
					}
					this._tblLine.Entity = value;
					if ((value != null))
					{
						value.tblStationInLines.Add(this);
						this._lineName = value.name;
					}
					else
					{
						this._lineName = default(string);
					}
					this.SendPropertyChanged("tblLine");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStation_tblStationInLine", Storage="_tblStation", ThisKey="stationID", OtherKey="ID", IsForeignKey=true)]
		public tblStation tblStation
		{
			get
			{
				return this._tblStation.Entity;
			}
			set
			{
				tblStation previousValue = this._tblStation.Entity;
				if (((previousValue != value) 
							|| (this._tblStation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStation.Entity = null;
						previousValue.tblStationInLines.Remove(this);
					}
					this._tblStation.Entity = value;
					if ((value != null))
					{
						value.tblStationInLines.Add(this);
						this._stationID = value.ID;
					}
					else
					{
						this._stationID = default(short);
					}
					this.SendPropertyChanged("tblStation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblStationInLine = this;
		}
		
		private void detach_tblActivities(tblActivity entity)
		{
			this.SendPropertyChanging();
			entity.tblStationInLine = null;
		}
		
		private void attach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblStationInLine = this;
		}
		
		private void detach_tblSiteFromExits(tblSiteFromExit entity)
		{
			this.SendPropertyChanging();
			entity.tblStationInLine = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _UserPassword;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _UserType;
		
		private EntitySet<tblUserLog> _tblUserLogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnUserPasswordChanging(string value);
    partial void OnUserPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnUserTypeChanging(string value);
    partial void OnUserTypeChanged();
    #endregion
		
		public tblUser()
		{
			this._tblUserLogs = new EntitySet<tblUserLog>(new Action<tblUserLog>(this.attach_tblUserLogs), new Action<tblUserLog>(this.detach_tblUserLogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPassword", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserPassword
		{
			get
			{
				return this._UserPassword;
			}
			set
			{
				if ((this._UserPassword != value))
				{
					this.OnUserPasswordChanging(value);
					this.SendPropertyChanging();
					this._UserPassword = value;
					this.SendPropertyChanged("UserPassword");
					this.OnUserPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this.OnUserTypeChanging(value);
					this.SendPropertyChanging();
					this._UserType = value;
					this.SendPropertyChanged("UserType");
					this.OnUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserLog", Storage="_tblUserLogs", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<tblUserLog> tblUserLogs
		{
			get
			{
				return this._tblUserLogs;
			}
			set
			{
				this._tblUserLogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUserLogs(tblUserLog entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblUserLogs(tblUserLog entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUserLog")]
	public partial class tblUserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserID;
		
		private System.DateTime _LogDate;
		
		private EntityRef<tblUser> _tblUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    #endregion
		
		public tblUserLog()
		{
			this._tblUser = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDate", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblUserLog", Storage="_tblUser", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblUserLogs.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblUserLogs.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblZone")]
	public partial class tblZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private char _number;
		
		private EntitySet<tblOysterCardArea> _tblOysterCardAreas;
		
		private EntitySet<tblPaperCardArea> _tblPaperCardAreas;
		
		private EntitySet<tblStation> _tblStations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumberChanging(char value);
    partial void OnnumberChanged();
    #endregion
		
		public tblZone()
		{
			this._tblOysterCardAreas = new EntitySet<tblOysterCardArea>(new Action<tblOysterCardArea>(this.attach_tblOysterCardAreas), new Action<tblOysterCardArea>(this.detach_tblOysterCardAreas));
			this._tblPaperCardAreas = new EntitySet<tblPaperCardArea>(new Action<tblPaperCardArea>(this.attach_tblPaperCardAreas), new Action<tblPaperCardArea>(this.detach_tblPaperCardAreas));
			this._tblStations = new EntitySet<tblStation>(new Action<tblStation>(this.attach_tblStations), new Action<tblStation>(this.detach_tblStations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Char(1) NOT NULL", IsPrimaryKey=true)]
		public char number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblZone_tblOysterCardArea", Storage="_tblOysterCardAreas", ThisKey="number", OtherKey="zoneNumber")]
		public EntitySet<tblOysterCardArea> tblOysterCardAreas
		{
			get
			{
				return this._tblOysterCardAreas;
			}
			set
			{
				this._tblOysterCardAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblZone_tblPaperCardArea", Storage="_tblPaperCardAreas", ThisKey="number", OtherKey="zoneNumber")]
		public EntitySet<tblPaperCardArea> tblPaperCardAreas
		{
			get
			{
				return this._tblPaperCardAreas;
			}
			set
			{
				this._tblPaperCardAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblZone_tblStation", Storage="_tblStations", ThisKey="number", OtherKey="zoneNumber")]
		public EntitySet<tblStation> tblStations
		{
			get
			{
				return this._tblStations;
			}
			set
			{
				this._tblStations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblOysterCardAreas(tblOysterCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblZone = this;
		}
		
		private void detach_tblOysterCardAreas(tblOysterCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblZone = null;
		}
		
		private void attach_tblPaperCardAreas(tblPaperCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblZone = this;
		}
		
		private void detach_tblPaperCardAreas(tblPaperCardArea entity)
		{
			this.SendPropertyChanging();
			entity.tblZone = null;
		}
		
		private void attach_tblStations(tblStation entity)
		{
			this.SendPropertyChanging();
			entity.tblZone = this;
		}
		
		private void detach_tblStations(tblStation entity)
		{
			this.SendPropertyChanging();
			entity.tblZone = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblSiteFromSite")]
	public partial class tblSiteFromSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _siteID1;
		
		private short _siteID2;
		
		private System.Nullable<float> _distance;
		
		private EntityRef<tblSite> _tblSite;
		
		private EntityRef<tblSite> _tblSite1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsiteID1Changing(short value);
    partial void OnsiteID1Changed();
    partial void OnsiteID2Changing(short value);
    partial void OnsiteID2Changed();
    partial void OndistanceChanging(System.Nullable<float> value);
    partial void OndistanceChanged();
    #endregion
		
		public tblSiteFromSite()
		{
			this._tblSite = default(EntityRef<tblSite>);
			this._tblSite1 = default(EntityRef<tblSite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siteID1", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short siteID1
		{
			get
			{
				return this._siteID1;
			}
			set
			{
				if ((this._siteID1 != value))
				{
					if (this._tblSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsiteID1Changing(value);
					this.SendPropertyChanging();
					this._siteID1 = value;
					this.SendPropertyChanged("siteID1");
					this.OnsiteID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_siteID2", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short siteID2
		{
			get
			{
				return this._siteID2;
			}
			set
			{
				if ((this._siteID2 != value))
				{
					if (this._tblSite1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsiteID2Changing(value);
					this.SendPropertyChanging();
					this._siteID2 = value;
					this.SendPropertyChanged("siteID2");
					this.OnsiteID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_distance", DbType="Real")]
		public System.Nullable<float> distance
		{
			get
			{
				return this._distance;
			}
			set
			{
				if ((this._distance != value))
				{
					this.OndistanceChanging(value);
					this.SendPropertyChanging();
					this._distance = value;
					this.SendPropertyChanged("distance");
					this.OndistanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSite_tblSiteFromSite", Storage="_tblSite", ThisKey="siteID1", OtherKey="ID", IsForeignKey=true)]
		public tblSite tblSite
		{
			get
			{
				return this._tblSite.Entity;
			}
			set
			{
				tblSite previousValue = this._tblSite.Entity;
				if (((previousValue != value) 
							|| (this._tblSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSite.Entity = null;
						previousValue.tblSiteFromSites.Remove(this);
					}
					this._tblSite.Entity = value;
					if ((value != null))
					{
						value.tblSiteFromSites.Add(this);
						this._siteID1 = value.ID;
					}
					else
					{
						this._siteID1 = default(short);
					}
					this.SendPropertyChanged("tblSite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSite_tblSiteFromSite1", Storage="_tblSite1", ThisKey="siteID2", OtherKey="ID", IsForeignKey=true)]
		public tblSite tblSite1
		{
			get
			{
				return this._tblSite1.Entity;
			}
			set
			{
				tblSite previousValue = this._tblSite1.Entity;
				if (((previousValue != value) 
							|| (this._tblSite1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSite1.Entity = null;
						previousValue.tblSiteFromSites1.Remove(this);
					}
					this._tblSite1.Entity = value;
					if ((value != null))
					{
						value.tblSiteFromSites1.Add(this);
						this._siteID2 = value.ID;
					}
					else
					{
						this._siteID2 = default(short);
					}
					this.SendPropertyChanged("tblSite1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
